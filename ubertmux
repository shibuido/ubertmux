#!/usr/bin/env bash
#
# ubertmux
#
# ubertmux is tmux to access nested tmux clients,
# running on default tmux server with default tmux config
# having ubertmux config and server isolated.
#
# ubertmux command prefix is Ctrl+A (!).
#
# This script ensures that you can run a tmux “ubertmux” server with its own custom config,
# completely isolated from your default tmux environment. By using a named socket with -L flag,
# we guarantee that even if your regular tmux server is already running (or you start it later),
# ubertmux will use its own settings (e.g. Ctrl+A prefix) and never get “-f ignored” errors.
#
# Usage:
#   1. Place this script somewhere in your PATH, e.g. ~/bin/ubertmux
#   2. Make it executable: chmod +x ~/bin/ubertmux
#   3. Run “ubertmux” to start or attach to your custom tmux server.
#
# What we’re doing:
#   1. Verify that tmux is installed.
#   2. Define variables for the custom config (~/.ubertmux.conf) and a dedicated socket name.
#   3. If the config doesn’t exist, create a minimal one that rebinds prefix to Ctrl+A.
#   4. Check if a tmux server is already listening on our ubertmux socket:
#        • Check if ubertmux server is already running on the named socket.
#   5. Launch tmux with “-f $UBERCONF -L $UBERSOCK new-session -A -s ubertmux”:
#        • “-f” ensures that this new server will load our custom config.
#        • "-L" creates a named socket in tmux's managed directory, guaranteeing isolation from the default server.
#        • “new-session -A -s ubertmux” creates or attaches to a session named “ubertmux” on that socket.
#
# By the end, you’ll have:
#   • An “outer” tmux server (ubertmux) listening on a dedicated socket, using prefix Ctrl+A.
#   • Within its panes, you can start your normal tmux clients (prefix Ctrl+B), with zero conflicts.
#

set -euo pipefail

#--------------------------------------------------
# Helper logging functions
#--------------------------------------------------
INFO()  { echo "INFO: $*"; }
ERROR() { echo "ERROR: $*" >&2; }

#--------------------------------------------------
# Command line argument parsing
#--------------------------------------------------

TOPIC=""
ACTION="default"
SHOW_HELP=false
TMUX_ARGS=()  # Array to store arguments to pass to tmux
INTERACTIVE_SELECT=false
INTERACTIVE_LIST=false
USE_TEMPLATE=false

show_help() {
    cat <<EOF
ubertmux - Terminal multiplexer with topic-based session management

USAGE:
    ubertmux [OPTIONS] [-- TMUX_OPTIONS]

OPTIONS:
    -t, --topic <name>    Switch to or create a topic session
    -s, --select          Interactive topic selection with fuzzy finder
    -l, --list-topics     List all active topic sessions
    -l -i, --list-topics -i Interactive topic browser
    --new-topic <name>    Create a new topic session
    --new-topic --template Interactive topic creation with templates
    -h, --help           Show this help message
    --                   Pass remaining arguments to tmux command

EXAMPLES:
    ubertmux                         # Start/attach to default session
    ubertmux --select               # Interactive topic selection
    ubertmux -s                     # Same as --select (short form)
    ubertmux --topic sysadmin       # Switch to sysadmin topic
    ubertmux -t sysadmin            # Same as --topic (short form)
    ubertmux --list-topics          # List all active topics
    ubertmux -l                     # Same as --list-topics (short form)
    ubertmux -l -i                  # Interactive topic browser
    ubertmux --new-topic development # Create new development topic
    ubertmux --new-topic --template  # Create topic from template
    ubertmux -- -d                  # Start detached session
    ubertmux --topic dev -- -x 120 -y 40  # Set terminal dimensions

TOPIC ORGANIZATION:
    Each topic creates a separate tmux session within the ubertmux server.
    Use Ctrl+A + s to see all sessions and switch between topics.
    Topics maintain separate workspace environments and can have
    nested tmux sessions without conflicts.
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--topic)
            TOPIC="$2"
            ACTION="topic"
            shift 2
            ;;
        -s|--select)
            ACTION="select"
            INTERACTIVE_SELECT=true
            shift
            ;;
        -l|--list-topics)
            ACTION="list"
            # Check if next argument is -i for interactive
            if [[ $# -gt 1 && "$2" == "-i" ]]; then
                INTERACTIVE_LIST=true
                shift 2
            else
                shift
            fi
            ;;
        --new-topic)
            # Check if next argument is --template
            if [[ $# -gt 1 && "$2" == "--template" ]]; then
                USE_TEMPLATE=true
                ACTION="new"
                shift 2
            else
                TOPIC="$2"
                ACTION="new"
                shift 2
            fi
            ;;
        -h|--help)
            SHOW_HELP=true
            shift
            ;;
        --)                       # first “--” marks end of ubertmux options
            shift                 # discard the “--”
            TMUX_ARGS=("$@")      # copy the rest verbatim for tmux
            break                 # stop further parsing
            ;;
        *)
            ERROR "Unknown option: $1"
            echo "Use --help for usage information."
            exit 1
            ;;
    esac
done

if [[ "$SHOW_HELP" == true ]]; then
    show_help
    exit 0
fi

INFO "🚀 Starting ubertmux setup..."

#--------------------------------------------------
# Topic management functions
#--------------------------------------------------

# Validate topic name (alphanumeric, dash, underscore only)
validate_topic_name() {
    local topic="$1"
    if [[ ! "$topic" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        ERROR "Invalid topic name '$topic'. Use only letters, numbers, dashes, and underscores."
        exit 1
    fi
}

# Get session name for a topic
get_session_name() {
    local topic="$1"
    if [[ -z "$topic" ]]; then
        echo "ubertmux"
    else
        echo "ubertmux-$topic"
    fi
}

# List all ubertmux topic sessions
list_topics() {
    local socket="$1"
    INFO "📋 Active ubertmux topics:"
    
    local sessions_output
    sessions_output=$(tmux -L "$socket" ls 2>/dev/null)
    
    if [[ -z "$sessions_output" ]]; then
        INFO "No ubertmux sessions found."
        echo
        INFO "💡 Use 'ubertmux' to start the default session."
        INFO "💡 Use 'ubertmux --topic <name>' to create a topic session."
        return 0
    fi
    
    echo "$sessions_output" | while IFS= read -r line; do
        # Extract session name from tmux ls output
        session_name=$(echo "$line" | cut -d: -f1)
        if [[ "$session_name" == "ubertmux" ]]; then
            echo "  • default (main session)"
        elif [[ "$session_name" =~ ^ubertmux-(.+)$ ]]; then
            topic_name="${BASH_REMATCH[1]}"
            echo "  • $topic_name"
        fi
    done
    
    echo
    INFO "💡 Use 'ubertmux --topic <name>' to switch to a topic."
    INFO "💡 Use Ctrl+A + s within ubertmux to see all sessions."
}

# Interactive topic selection functions (adapted from tmuxa)
#--------------------------------------------------

# Detect available fuzzy finders
has_fuzzy_finder() {
    command -v sk >/dev/null 2>&1 || command -v fzf >/dev/null 2>&1
}

# Get all available topics with metadata
get_topic_choices() {
    local socket="$1"
    local choices=()
    
    # Add option to create new topic
    choices+=("+ Create New Topic")
    
    # Get existing sessions
    local sessions_output
    sessions_output=$(tmux -L "$socket" ls 2>/dev/null)
    
    if [[ -n "$sessions_output" ]]; then
        while IFS= read -r line; do
            local session_name windows_info
            session_name=$(echo "$line" | cut -d: -f1)
            windows_info=$(echo "$line" | cut -d: -f2-)
            
            if [[ "$session_name" == "ubertmux" ]]; then
                choices+=("default ── $windows_info")
            elif [[ "$session_name" =~ ^ubertmux-(.+)$ ]]; then
                local topic_name="${BASH_REMATCH[1]}"
                choices+=("$topic_name ── $windows_info")
            fi
        done <<< "$sessions_output"
    fi
    
    printf '%s\n' "${choices[@]}"
}

# Interactive topic selection with fallback
select_topic_interactive() {
    local socket="$1"
    local choices choice
    
    mapfile -t choices < <(get_topic_choices "$socket")
    
    if (( ${#choices[@]} <= 1 )); then
        echo "No existing topics found. Will create new topic." >&2
        return 1
    fi
    
    if command -v sk >/dev/null 2>&1 && [[ -t 0 ]]; then
        choice="$(printf '%s\n' "${choices[@]}" | sk --prompt='📋 Select topic ❯ ' 2>/dev/null)" || choice=""
    elif command -v fzf >/dev/null 2>&1 && [[ -t 0 ]]; then
        choice="$(printf '%s\n' "${choices[@]}" | fzf --prompt='📋 Select topic ❯ ' 2>/dev/null)" || choice=""
    else
        echo "📋 Select a topic:"
        select choice in "${choices[@]}"; do
            [[ -n $choice ]] && break
            echo "Invalid selection. Please try again."
        done
    fi
    
    if [[ -z $choice ]]; then
        echo "No topic selected." >&2
        exit 3
    fi
    
    # Parse selection
    if [[ "$choice" == "+ Create New Topic" ]]; then
        return 1  # Signal to create new topic
    elif [[ "$choice" =~ ^([^─]+)[[:space:]]*── ]]; then
        local selected_topic="${BASH_REMATCH[1]// /}"
        if [[ "$selected_topic" == "default" ]]; then
            echo ""  # Return empty for default
        else
            echo "$selected_topic"
        fi
    else
        echo "Error parsing selection: $choice" >&2
        exit 4
    fi
}

# Topic templates system
#--------------------------------------------------

# Define common topic templates
get_topic_templates() {
    cat <<EOF
sysadmin ── System administration, log monitoring, server management
development ── Programming projects, code editing, git workflows  
monitoring ── Health monitoring, metrics, dashboards
research ── Documentation, web browsing, note-taking
finance ── Financial tools, calculations, budget tracking
testing ── QA, automated testing, debugging
deployment ── CI/CD, infrastructure, releases
personal ── Personal projects, learning, experiments
EOF
}

# Interactive template selection
select_template_interactive() {
    local templates choice
    
    mapfile -t templates < <(get_topic_templates)
    templates+=("custom ── Create custom topic (no template)")
    
    if command -v sk >/dev/null 2>&1 && [[ -t 0 ]]; then
        choice="$(printf '%s\n' "${templates[@]}" | sk --prompt='🎯 Select template ❯ ' 2>/dev/null)" || choice=""
    elif command -v fzf >/dev/null 2>&1 && [[ -t 0 ]]; then
        choice="$(printf '%s\n' "${templates[@]}" | fzf --prompt='🎯 Select template ❯ ' 2>/dev/null)" || choice=""
    else
        echo "🎯 Select a template:"
        select choice in "${templates[@]}"; do
            [[ -n $choice ]] && break
            echo "Invalid selection. Please try again."
        done
    fi
    
    if [[ -z $choice ]]; then
        echo "No template selected." >&2
        exit 3
    fi
    
    # Parse template name
    if [[ "$choice" =~ ^([^─]+)[[:space:]]*── ]]; then
        local template_name="${BASH_REMATCH[1]// /}"
        echo "$template_name"
    else
        echo "custom"
    fi
}

# Handle interactive selection
if [[ "$ACTION" == "select" ]]; then
    UBERSOCK="ubertmux"
    selected_topic=$(select_topic_interactive "$UBERSOCK")
    
    if [[ $? -eq 1 ]]; then
        # User chose to create new topic or no topics available
        if has_fuzzy_finder; then
            # Use template selection if fuzzy finder available
            template=$(select_template_interactive)
            if [[ "$template" == "custom" ]]; then
                echo -n "Enter custom topic name: "
                read -r new_topic_name
            else
                new_topic_name="$template"
            fi
        else
            echo -n "Enter new topic name: "
            read -r new_topic_name
        fi
        
        if [[ -n "$new_topic_name" ]]; then
            validate_topic_name "$new_topic_name"
            TOPIC="$new_topic_name"
            ACTION="new"
        else
            echo "No topic name provided. Exiting."
            exit 1
        fi
    else
        TOPIC="$selected_topic"
        ACTION="topic"
    fi
fi

# Handle list-topics action
if [[ "$ACTION" == "list" ]]; then
    # We need to check if ubertmux server is running first
    UBERSOCK="ubertmux"
    
    if [[ "$INTERACTIVE_LIST" == true ]]; then
        # Interactive topic browser
        selected_topic=$(select_topic_interactive "$UBERSOCK")
        
        if [[ $? -eq 1 ]]; then
            # User chose to create new topic
            if has_fuzzy_finder; then
                # Use template selection if fuzzy finder available
                template=$(select_template_interactive)
                if [[ "$template" == "custom" ]]; then
                    echo -n "Enter custom topic name: "
                    read -r new_topic_name
                else
                    new_topic_name="$template"
                fi
            else
                echo -n "Enter new topic name: "
                read -r new_topic_name
            fi
            
            if [[ -n "$new_topic_name" ]]; then
                validate_topic_name "$new_topic_name"
                TOPIC="$new_topic_name"
                ACTION="new"
                # Continue to session creation
            else
                echo "No topic name provided. Exiting."
                exit 1
            fi
        else
            TOPIC="$selected_topic"
            ACTION="topic"
            # Continue to session attachment
        fi
    else
        # Plain list
        list_topics "$UBERSOCK"
        exit 0
    fi
fi

# Handle template-based topic creation
if [[ "$USE_TEMPLATE" == true ]]; then
    if has_fuzzy_finder; then
        template=$(select_template_interactive)
        if [[ "$template" == "custom" ]]; then
            echo -n "Enter custom topic name: "
            read -r new_topic_name
        else
            new_topic_name="$template"
        fi
        
        if [[ -n "$new_topic_name" ]]; then
            validate_topic_name "$new_topic_name"
            TOPIC="$new_topic_name"
            ACTION="new"
        else
            echo "No topic name provided. Exiting."
            exit 1
        fi
    else
        echo "Template selection requires a fuzzy finder (sk or fzf)."
        echo "Please install sk or fzf, or use: ubertmux --new-topic <name>"
        exit 1
    fi
fi

# Validate topic name if provided
if [[ -n "$TOPIC" ]]; then
    validate_topic_name "$TOPIC"
fi

############################################
# 1. Ensure tmux is installed and runnable  #
############################################

if ! command -v tmux &>/dev/null; then
    ERROR "tmux is not installed or not in PATH."
    ERROR "Please install tmux first (e.g., apt install tmux, brew install tmux, etc.)."
    exit 1
fi

INFO "✔ tmux found."

############################################
# 2. Define config file and socket paths  #
############################################

# Path to the custom ubertmux config
UBERCONF="$HOME/.ubertmux.conf"

# Socket name for the ubertmux server.
# Using -L flag, tmux handles the socket directory automatically
# (typically /tmp/tmux-UID/ubertmux or under TMUX_TMPDIR if set)
UBERSOCK="ubertmux"
INFO "Using dedicated socket name: $UBERSOCK"

#--------------------------------------------------
# Optional workspace support
#--------------------------------------------------
# If the environment variable UBERTMUX_WORKSPACE is set, we validate that it
# points to an existing directory.  Later we will:
#   • Append a “new-window -c <workspace>” binding to the config (if missing)
#   • Change to that directory before launching tmux
WORKSPACE="${UBERTMUX_WORKSPACE:-}"
if [[ -n "$WORKSPACE" ]]; then
    if [[ ! -d "$WORKSPACE" ]]; then
        ERROR "UBERTMUX_WORKSPACE is set to '$WORKSPACE' but that directory does not exist."
        exit 1
    fi
    INFO "UBERTMUX_WORKSPACE detected: $WORKSPACE"
fi

INFO "ℹ Ubertmux config will be: $UBERCONF"
INFO "ℹ Ubertmux socket name will be: $UBERSOCK"

###########################################################
# 3. Create ~/.ubertmux.conf if it doesn’t already exist  #
###########################################################

if [[ ! -f "$UBERCONF" ]]; then
    INFO "✍ $UBERCONF not found. Creating enhanced ubertmux config with topic support..."

    cat > "$UBERCONF" <<'EOF'
# ~/.ubertmux.conf
#
# Enhanced tmux config for ubertmux with topic support:
#   • Change prefix to Ctrl+A
#   • Unbind old prefix Ctrl+B
#   • Make sure “send-prefix” is available so nested tmux can receive Ctrl+A if needed.

set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Topic-aware status line configuration
set -g status-left-length 30
set -g status-right-length 50
set -g status-left '#[fg=green]#(echo $USER)@#h#[default] '
set -g status-right '#[fg=yellow]#{session_name}#[default] | %Y-%m-%d %H:%M'

# Enhanced session navigation for topics
bind-key s choose-tree -s -O name  # Better session switching
bind-key S new-session             # Quick new session

# Improved pane management
bind-key | split-window -h         # Vertical split with |
bind-key - split-window -v         # Horizontal split with -

# Topic-specific window management
bind-key w choose-tree -w          # Enhanced window selector
bind-key C-w new-window            # Quick new window

# Copy mode improvements (useful for log analysis across topics)
setw -g mode-keys vi
bind-key [ copy-mode
bind-key ] paste-buffer

# Mouse support for easier topic/pane switching
set -g mouse on

# Visual improvements for topic identification
set -g window-status-current-style 'fg=white,bold,bg=red'
set -g window-status-style 'fg=cyan'
set -g status-style 'fg=white,bg=black'

# Better session grouping display
set -g status-justify centre

# History and logging (useful for sysadmin topics)
set -g history-limit 10000

# Topic switching helper - show all sessions with descriptions
bind-key ? run-shell 'tmux list-sessions -F "#{session_name}: #{session_windows} windows, #{session_attached} attached" | sort'

# (You may add more ubertmux-only bindings here if desired,
#  such as additional topic-specific shortcuts, pane-navigation, etc.)
EOF

    INFO "✔ Created enhanced $UBERCONF with topic support."
else
    INFO "✔ Found existing ubertmux config at $UBERCONF. Leaving it intact."
fi

#--------------------------------------------------
# 3b. If a workspace is requested, ensure the config
#     has a binding to open new windows inside it.
#--------------------------------------------------
if [[ -n "$WORKSPACE" ]]; then
    # Avoid duplicating the bind line if the user already has one.
    if ! grep -qE "bind[[:space:]]+c[[:space:]]+new-window[[:space:]]+-c[[:space:]]+'?$WORKSPACE'?" "$UBERCONF"; then
        INFO "Adding workspace-specific new-window binding to $UBERCONF"
        printf "\n# Start new windows in CWD=%s\nbind c new-window -c '%s'\n" "$WORKSPACE" "$WORKSPACE" >> "$UBERCONF"
    fi
fi

##############################################################
# 4. Check if ubertmux server is already running #
##############################################################

# With -L flag, tmux manages socket lifecycle automatically
if tmux -L "$UBERSOCK" ls &>/dev/null 2>&1; then
    INFO "✔ A tmux server is already running on socket name: $UBERSOCK"
else
    INFO "ℹ No existing ubertmux server detected. Will create a new server shortly."
fi

####################################################
# 5. Launch (or attach) the ubertmux tmux session  #
####################################################

INFO "🔧 Starting or attaching to the ubertmux tmux server..."
INFO "Note: We use '-f $UBERCONF -L $UBERSOCK' to ensure a brand-new server (or attach to the right one)."
INFO "This guarantees that your default tmux (on its own socket) will never load ~/.ubertmux.conf."
echo

# -f  : point to our ubertmux-specific config
# -L  : use a named socket (so it doesn't collide with default tmux)
# new-session -A -s ubertmux:
#        * -s ubertmux names the session “ubertmux”
#        * -A        tells tmux: “If session exists, attach. Otherwise, create it.”

# If a workspace has been requested, switch to it so the initial pane starts there.
if [[ -n "$WORKSPACE" ]]; then
    INFO "Changing directory to workspace: $WORKSPACE"
    cd "$WORKSPACE"
fi

# Determine session name based on topic
SESSION_NAME=$(get_session_name "$TOPIC")

if [[ -n "$TOPIC" ]]; then
    INFO "🎯 Starting topic session: $TOPIC (session: $SESSION_NAME)"
else
    INFO "🎯 Starting default ubertmux session"
fi

# Handle topic-specific workspace support
if [[ -n "$TOPIC" ]] && [[ -z "$WORKSPACE" ]]; then
    # Check if there's a topic-specific workspace defined
    TOPIC_WORKSPACE_VAR="UBERTMUX_WORKSPACE_$(echo "$TOPIC" | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
    TOPIC_WORKSPACE="${!TOPIC_WORKSPACE_VAR:-}"
    if [[ -n "$TOPIC_WORKSPACE" ]] && [[ -d "$TOPIC_WORKSPACE" ]]; then
        INFO "Using topic-specific workspace: $TOPIC_WORKSPACE"
        cd "$TOPIC_WORKSPACE"
    fi
fi

if [[ "$ACTION" == "new" ]]; then
    # For new topics, check if session already exists
    if tmux -L "$UBERSOCK" has-session -t "$SESSION_NAME" 2>/dev/null; then
        INFO "Topic session '$TOPIC' already exists. Attaching to existing session."
    else
        INFO "Creating new topic session: $TOPIC"
    fi
fi

tmux -f "$UBERCONF" -L "$UBERSOCK" new-session -A -s "$SESSION_NAME" "${TMUX_ARGS[@]}"

# If tmux exits unexpectedly, the script will end here.
#
# After this, you are inside the ubertmux environment.  
# Use Ctrl+A as your prefix.  
# To split panes: Ctrl+A + " (horizontal) or Ctrl+A + % (vertical).  
# Within each pane, you can run your default tmux (prefix Ctrl+B), attach to existing sessions, etc.
#
# If you exit or detach (Ctrl+A + d), you can resume later by running this same “ubertmux” script again.
#
# Enjoy your multi-layered tmux setup—outer (ubertmux) with Ctrl+A, inner (default) with Ctrl+B,
# with zero risk of “-f <config> ignored” errors or keybinding collisions.
#
